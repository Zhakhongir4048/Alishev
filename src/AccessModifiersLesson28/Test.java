package AccessModifiersLesson28;


import AccessModifiers1Lesson28.Person;

public class Test extends Person {
    protected int id;        // это поле доступно в пределах нашего пакета

    public Test(){
        name = "Tom";          // мы получили доступ к полю name с модификатором protected из другого пакета, так как мы унаследовались от класса, где это поле декларировано
    }


                                                              /*Пирамида модификаторов доступа
                                                                         _____
                                                                        /     \
                                                                       /       \
                                                                      / private \
                                                                     /  default  \
                                                                    /   protected \
                                                                   /____public_____\*/
        public static void main(String[] args) {
            System.out.println(Person.SALAM_ALLEYKUM);

        Person person = new Person();
    }


    private void technicalMethod(){    // технический метод для каких-то внутренних нужд, который не должен быть виден всем остальным классам нашего проекта

    }

    void defaultMethod(){              // всё что default(модификатор по умолчанию) доступно в пределах этого пакета

    }
}
/*
Какие модификаторы доступа есть
public
private
default (по умолчанию)
protected

Модификатор public разрешает доступ к классу, к методу или полю везде в протяжении одного проекта
Мы можем получить доступ к какому-то объекту в пределах этого класса, где этот объект был декларирован, мы можем получить к нему доступ
в любом другом классе и в любом другом пакете

Модификатор private поле - в пределах того класса , где это поле декларировано , за пределами этого класса мы доступ к этому полю не сможем получить
Можем также делать приватные методы , если мы не хотим , чтобы этот метод был частью API , если мы хотим использовать наш метод только в пределах
нашего класса и мы не хотим показывать всем остальным , то метод мы декларируем приватным

Модификатор default (по умолчанию) включается тогда , когда мы не указываем модификатор , ещё этот модификатор по умолчанию называют модификатор в пакете
Всё что мы декларируем default всё это доступно в пределах этого пакета

Модификатор protected -это поле и метод доступны в пределах одного пакета, эти поля и методы доступны всем подклассам даже эти подклассы вне пакета, где эти поля
и методы были декларированы
В отличие от default , protected более сводобный  и даёт доступ к этому полю вне этого пакета  при условии , что класс , в котором мы хотим получить доступ к этому полю
он наследуется от класса , в котором это поле декларировано
 */
/* Класс у нас может быть либо публичным, либо default (по умолчанию),  если мы создали Java файл, то класс должен быть обязательно публичным , класс , название которого
совпадает с Java файлом должен обязательно быть публичным, в одном Java файле обязательно должен быть один публичный класс
В этом Java файле мы можем создать множество не публичных классов и их можно рассматривать как вспомогательные классы , в одном Java файле не может быть двух публичных классов
 */
/* Создадим пакет  AccessModifiers1Lesson28 с классом Person, дадим этому классу публичное поле name

package AccessModifiers1Lesson28;

public class Person {
    public String name;
}


Пойдём в наш класс Test, который находится в другом пакете, и здесь попробуем получить доступ к полю name , прекрасно получаем доступ к полю и присваиваем ему значение
Так мы можем сделать только с модификатором public, если мы его уберём , то будет ошибка, потому, что поле становится default и он распространяется только на один пакет



package AccessModifiersLesson28;


import AccessModifiers1Lesson28.Person;

public class Test {
    protected int id;        // это поле доступно в пределах нашего пакета

    public static void main(String[] args) {
        Person person = new Person();
        person.name = "Bob";
    }

 */
/* Если мы в пакете AccessModifiers1Lesson28.Person создадим ещё один класс , то в этом классе мы спокойно можем получить доступ к полю name , если name объявлен модификатором
по умолчанию, пакет один потому, что ! Там находятся классы в одном пакете , модификатор доступа по умолчанию (default) позволяет такое, из другого пакета такого не можем получить
доступ к полю default

package AccessModifiers1Lesson28;

public class Main {
    public static void main(String[] args) {
        Person person = new Person();
        person.name = "Bob";
    }
}


 */
/* Крайне нежелательно свои поля класса делать публичными или делать их default , то есть по умолчанию!!!
Если поле объявлено как private , хоть даже в одном пакете находятся классы,  доступ к нему не получим, только свой класс, где метод и поля были декларированы !!!!


ЕДИНСТВЕННЫЙ СЛУЧАЙ ГДЕ НУЖНО ДЕКЛАРИРОВАТЬ ПОЛЯ ПУБЛИЧНЫМИ - ЭТО КОНСТАНТЫ, ЛУЧШЕ ВСЕГО ИХ ДЕЛАТЬ СТАТИЧЕСКИМИ , КОНСТАНТА ДОЛЖНА БЫТЬ ОДНА ДЛЯ ВСЕХ

package AccessModifiersLesson28;


import AccessModifiers1Lesson28.Person;

public class Test {
    protected int id;        // это поле доступно в пределах нашего пакета

    public static void main(String[] args) {
        System.out.println(Person.SALAM_ALLEYKUM);
    }


    private void technicalMethod(){    // технический метод для каких-то внутренних нужд, который не должен быть виден всем остальным классам нашего проекта

    }

    void defaultMethod(){              // всё что default(модификатор по умолчанию) доступно в пределах этого пакета

    }
}


 */
/* Модификатор доступа protected - он менее свободен чем public, но более свободный чем private и default
Мы можем получить доступ к полю в том же пакете , где находятся классы

package AccessModifiers1Lesson28;

public class Test {
    public static void main(String[] args) {
        Person person = new Person();
        System.out.println(person.name) ;
    }
}

Вывод
Bob
 */
/* Если мы унаследуем класс , мы сможем получить доступ к полю name с модификатором protected вне пакета , где это поле задекларировано */
