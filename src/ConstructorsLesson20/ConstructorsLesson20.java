package ConstructorsLesson20;

public class ConstructorsLesson20 {
    public static void main(String[] args) {

        Brend brend = new Brend();

        Brend brend1 = new Brend("Bob");
        System.out.println(brend1);

        Brend brend2 = new Brend("Usman", 30);

        System.out.println(brend2.getAge() + " " + brend2.getName());
    }

}
class Brend {

    private String name;
    private int age;

    public Brend(){
        this.name = "Имя по умолчанию";
        this.age  = 0;
        System.out.println(name);
        System.out.println(age);
    }

    public Brend(String name){                   // Переопределяем конструктор
        System.out.println("Привет из второго конструктора");
        this.name = name;
    }

    public Brend(String name, int age){                                // Конструктор который назначает сразу имя и возраст
        System.out.println("Привет из третьего конструктора");
        this.name =  name;
        this.age = age;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public void setAge(int age)
    {
        this.age = age;
    }

    public String getName(){
        return name;
    }

    public int getAge(){
        return age;
    }
}
/* Конструкторы - это такие специальные методы, которые вызываются при создания нового объекта
Этот метод, при своём  вызове, он конструирует объект, то есть он задаёт объекту и инициализирует его поля, его атрибуты
У нас есть класс Brend и предлагаемый конструктор который может быть в этом классе
String name;
int age;
 */
/* Зачем нам конструкторы?
Конструктор - это особый метод , который вызывается при создании нового объекта
то есть в месте  new Brend();
когда мы создаём новый объект сразу же вызывается конструктор
 */
/* Почему мы должны использовать конструктор?
Человек не может существовать без имени и возраста
Оттого, что ты создал объект человека, без инициализации имени и возраста толку нет
 */
/* Нам нужен какой-то способ,  чтобы пользователь не смог создавать объекты класса ни передав нужные значения
В нашем случае пользователь обязан передать имя и возраст
Без передачи этих параметров эти имя и возраст будут назначены по умолчанию
Это неправильная ситуация и эту проблему будем решать с помощью конструктора
* */
/* по умолчанию если мы не создаём своих конструкторов в классе , то конструктор один
в классе Brend лежит по умолчанию , это такой конструктор пустой и конструктор по умолчанию
на самом деле в классе Brend есть конструктор, но мы его не видим , он обладает пустыми параметрами

 public Brend()                                           //пустой конструктор и у него пустое тело
    {

    }

При создании объекта Brend  в другом классе   вызывается именно этот пустой , невидимый конструктор , который ничего не выполняет
никаких присваивания , никакой логики
Отличается от обычного метода тем, что у конструктора нет типа возвращаемого значения
Имя конструктора должно совпадать с именем класса
Конструктор начинается с Большой буквы , потому , что имя класса начинается с большой буквы
 */
/* Сделаем так, что конструктор по умолчанию Brend мы переопределим в классе Brend
Теперь в конструкторе мы можем написать что-то своё
Например при создании объекта с пустыми параметрами мы будем выводить на экран

public Brend()
{
   System.out.println("Привет из первого конструктора ");
}
 */
/* Что если нам нужно указывать имя и возраст при создании объекта
 * создадим для этого свой конструктор , которой будет принимать в параметры для входа имя и возраст
 * public Brend(String name, int age)
 * {
 * this.name = name;
 * this.age = age;
 * }
 *
 * В этом конструкторе мы будем назначать this.name то, что ему пришло в параметры конструктора
 *
 * */
/* Теперь мы можем создать объект не поставляя ему параметров , можем поставлять ему параметры
 * Перегрузка методов - это когда в одном классе, одинаковые имена методов , но разные параметры
 * из-за этого они существуют */
/* Если мы хотим ограничить нашего пользователя , в том чтобы он не создавал объект , не обозачив имя и возраст
тогда мы можем стереть остальные конструкторы, оставив только тот конструктор, который принимает в параметры имя и возраст
 */
/* Сделаем так , что если пользователь ничего не поставляет , то есть не пишет имя и возраст
значения поставляются по умолчанию
Идея конструктора в том, что при создании объекта у нас инициализировались поля класса Brend
это важно!
При создании объекта в любом случае вызывается конструктор
Когда вы переопределяете ваш конструктор , тот конструктор по умолчанию перестаёт работать
 */