package StringBuilderLesson23;



public class StringBuilderLesson23 {

    public static void main(String[] args) {

        StringBuilder stringBuilder = new StringBuilder("Hello");     // В конструктор мы можем поставлять начальную строку объекта
        System.out.println(stringBuilder.toString());                // Чтобы вывести строку объекта StringBuilder используй метод toString()
        stringBuilder.append(" my ");                               // метод append("то, что хотим добавить");
        stringBuilder.append("friend - ").append("Dzhoha");                // метод channing
        System.out.println(stringBuilder.toString());


        String x = "hello";
        x = x.toUpperCase();
        System.out.println(x);



        String string1 = "Hello";           // остаётся ссылка
        String string2 = " my";             // остаётся ссылка
        String string3 = " friend ";         // остаётся ссылка
        String stringAll = string1 + string2 + string3;
        System.out.println(stringAll);
    }

}
/* В Java существует 2 типа объектов
1) первый тип объектов mutable(изменяемый)
2) второй тип объектов immutable(неизменяемый)

класс Brend из 20 урока, и он изменяемый , мы можем изменять состояние нашего объекта

тип данных String - immutable, то есть строки не изменяются
мы создаём строку и она имеет какое-то значение начальное
String s = "hello";

Теперь, если мы вызовим на объекте какой-нибудь метод, например toUpperCase();

s.toUpperCase(); // метод , который делает все строчные буквы заглавными

Все методы класса String, они не оперируют на строке на котором они вызываются, они возвращают новую строку
которая является результатом выполнения этого метода


Если сделать вот так , то строка не изменится, потому что все методы класса String не изменяют строку на котором они вызываются,
они возвращают новую строку

String x = hello;
x.toUpperCase();
System.out.println(x);

Вывод
hello
 */
/* Нужно переопределить х, в котором поместим значение, который получим после выполнения этого метода
String x = hello;
x = x.toUpperCase();
System.out.println(x);

Вывод
HELLO


Сработало потому, что мы вызвали метод на объекте класса String, и этот метод вернул новую строку, которую мы поместили вместо первого объекта

теперь на объект hello никакая переменная не ссылается, теперь мы эту переменную(х) сослали на новый объект  класса String

объект hello не изменится до конца программы, это строка так и останется hello , какие бы методы мы бы не вызывали, сама строка не будет меняться никаким образом

Если мы имеем дело с immutable объектами , то результаты методов нужно обязательно помещать в переменную
 */
/* Когда мы конкатенируем строки string1+string2+string3


например string1+string2 создаётся третья строка , которая объединяет эти 2 строки, когда мы конкатенируем её с третьей строкой, то создаётся ещё один объект класса String
 ссылки остаются на эти объекты, но в любом случае у нас происходит создание двух дополнительных строк в такой простой операции, если у нас конкатенация небольшая , то ничего
 страшного , но если мы конкатенируем очень много  , если мы делаем это в цикле , то такая операция снижает скорость программы и увеличивает расход памяти
 ДЛЯ ТАКИХ ЦЕЛЕЙ БЫЛ ПРИДУМАН StringBuilder
 StringBuilder - mutable (изменяемый) , то есть объекты могут изменяться в ходе программы
 В конструктор StringBuilder мы можем поставить, можем не поставлять  начальное значение строки
 Чтобы вывести нашу строку мы должны вызвать метод toString() у объекта класса StringBuilder
 Прелесть StringBuilder в том, что мы можем не создавая новых объектов,  к объекту stringBuilder конкатенировать сколько угодно строк
 для этого мы должны вызвать на объекте StringBuilder метод append("то что хотим написать") , в этом методе , в его параметрах мы пишем строку , которую мы хотим конкатенировать
 к уже имеющимся
 */
/* Мы можем сократить наш код , метод append() возвращает объект класса StringBuilder на котором он был вызван
 * поэтому мы можем по цепочке вызывать методы, это называется метод chaining   */