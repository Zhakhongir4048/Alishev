package InheritanceLesson25;

public class InheritanceLesson25 {
    public static void main(String[] args) {
        Animal animalInheritanceLesson25 = new Animal();
        animalInheritanceLesson25.eat();
        animalInheritanceLesson25.sleep();
        Dog dog = new Dog();
        dog.eat();
        dog.sleep();
        dog.bark();
        dog.eat();
        dog.showName();
    }
}
/* Давайте создадим новый класс, для этого мы в папке src нажмём правой кнопкой мыши, New -> Java Class
Создаём класс с названием Animal


Давайте создадим ещё один класс, в котором мы будем запускать, создавать наши объекты , напишем название класса Lesson25, в этом классе мы создадим метод main

Так как, мы создали класс Animal , мы можем спокойно создавать в классе InheritanceLesson25  , объекты класса Animal , и мы можем ссылать на эти
объекты переменные типа Animal

класс Animal представляет из себя такую абсракцию какого-то животного, создавая класс Animal  мы не знаем какое это животное
(собака, кошка и т.д)

Мы знаем лишь то, что этот объект является каким-то животным

Давайте создадим ещё один класс Dog(собака)

Переместимся в класс Animal и скажем, что пусть все наши животные будут уметь есть, пусть все наши животные будут уметь спать
Для этого мы должны снабдить наш класс двумя методами eat и sleep
Напишем
 public void eat() {
        System.out.println("I am eating");
    }

Этот метод будет делать ничего, кроме того, что будет просто выводить на экран I am eating

Напишем ещё один метод

  public void sleep(){
        System.out.println("I am sleeping");
    }


Этот метод будет выводить на экран I am sleeping
 */
/* Теперь , если мы переместимся в наш класс с методом main(то есть класс InheritanceLesson25) , мы можем у этого объекта класса Animal вызвать методы
eat() и sleep()
Таким образом наше животное умеет есть и спать
 */
/* Где нужно применить наследование?
Собака, это тоже животное, собака это тоже Animal, собака умеет есть, собака умеет спать, поэтому собака расширяет функционал  класса Animal
То есть собака - это более узкое(конкретное) понятие, чем животное


мы можем написать (собака) класс Dog наследуется от животного (класс Animal)

public class Dog extends Animal {

}


класс Animal является родителем класса Dog , это значит что теперь мы дали понять Java , что собака является животным , теперь у собаки есть методы eat и sleep

Мы говорили в прошлом уроке, что каждый класс наследуется от класса Object. Каждый класс по сути является объектом, наиболее широкое понятие у нас в Java это объект
Когда мы создаём свой класс, мы это понятие сужаем до своего класса, но всё равно мы можем рассматривать свой класс как в принципе объект , в самом широком смысле, а теперь мы
ещё съюзили понятия, и теперь мы сначала создали класс Animal (которое обозначает общее понятие животного) и съюзили это понятие ещё , создав класс Dog,
который является животным (Animal) и который в свою очередь наследует все методы и все поля класса Animal

И если теперь, мы перейдём в класс Lesson25(где метод main) мы можем создать новые объекты класса Dog
И мы можем теперь у объектов класса Dog вызывать те самые методы которые мы наследовали у класса Animal


public class InheritanceLesson25  {
    public static void main(String[] args) {
 Dog dog = new Dog();
        dog.eat();
        dog.sleep();
   }
}

Всё выводится , даже в самом классе Dog мы ничего не написали , но так как собака это у нас животное, поэтому собака наследует все методы животного
НО СОБАКА МОЖЕТ ИМЕТЬ СВОИ МЕТОДЫ
давайте напишем какой-то метод, который будет справедлив только для собаки, например лаять

public class Dog extends Animal {
       public void bark(){
           System.out.println("I am barking");
       }
}


Теперь у объекта класса Dog помимо того, что мы можем вызвать методы которые достались от класса Animal, мы можем также вызвать метод, который мы написали
в собственном классе Dog , поэтому мы можем написать dog.bark(); Теперь собака у нас умеет ещё и лаять

Помимо того, что мы можем добавлять ещё свои методы в наши классы, которые наследуются , МЫ МОЖЕМ ПЕРЕОПРЕДЕЛЯТЬ МЕТОДЫ  РОДИТЕЛЯ

возмём метод eat(); - этот метод общий для всех животных , сделаем так, чтобы наша собака ела как-то по-особенному
поэтому мы должны написать

public void


обратите внимание, что появляется такая штука, Слева от названия метода, которая говорит нам, что мы переопределяем метод в классе  Animal
если у нас сигнатура метода одинакова с сингатурой метода у родителя, то  Java рассматривает это как переопределение метода , то  есть этот метод в классе Animal
не актуален, потому , что мы его заменяем своим методом в классе-потомке , метод в классе-потомке будет актуален


 public void eat() {
        System.out.println("I am eating");
    }


Если теперь мы вызовим на объекте класса dog метод eat , вызовится метод  который мы написали в классе-потомке

Это тоже самое, что мы переопределяли метод toSting() родителя класса Object в прошлом уроке

Наследование мы используем в том случае, когда у нас есть какой-то общий класс, и мы хотим какие-то методы получить от этого класса, от более общего , и какие-то методы мы хотим
внести конкретный уже подходящий к нашему классу, если у нас будут несколько животных, то мы все эти классы можем наследовать от класса Animal
класс Animal будет общим родителем для всех классов, ну у каждого класса мы можем переопределить какие-то методы либо добавить свои методы, которые сделают
уже эти классы конкретными животными, удобство в том, что нам не нужно в каждом животном прописывать логику, прописывать методы , животного в целом!
Если мы создадим много классов-потомков, то нам не нужно в каждом из этих классов эти методы, которые принадлежат всем животным в целом , мы просто наследуемся от этого класса
Animal и эти методы придут к нам автоматически
 */
/* КАК Наследуются поля ?

 создаём поле какое-нибудь в классе Animal
 предположим у всех животных будет имя
 String name;


Теперь в классе Dog создадим метод  и выводим это имя на экран , вы видите что в классе Dog имени нет , но это имя наследуется от родителя
Мы можем вызвать метод   showName() у объекта класса Dog

 public void showName(){
        System.out.println(name);
    }


 */
/* Давайте назначим имя Some Animal полю name


Если мы поставим модификатор private полю name в классе родителе, оно будет доступно только в классе родителе!!!
 */