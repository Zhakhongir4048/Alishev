package WrapperClassesForPrimitiveDataTypesLesson31;

public class WrapperClassesForPrimitiveDataTypesLesson31 {
    public static void main(String[] args) {

        Integer x2=  123;  // упаковали примитив в класс-обёртку
        int y = x2;       // распаковали  примитив в примитивный тип int

        Integer.parseInt("123");





        // классы-обёртки  Double, Float, Long, Integer, Short, Byte, Character, Boolean - все эти классы находятся в пакете java.lang
    }
}
/* Классы-обёртки примитивных типов данных
В чём нужда этих классов-обёртков?
нужда в том, что у этих примитивов нет методов !
Если мы создали примитив типа int , то мы видим , что у неё нет никаких методов, всё что мы видим это конструкции языка,
которые среда разработки за нас может вставить , например если мы выберем sout, то среда разработки выведет за нас
переменную на экран
 */
/* Бывают такие случаи, когда от примитивов нужно что-то большее , когда вы хотите использовать какой-то метод, связанный с этим примитивом
ТОГДА В ДЕЛУ ВСТУПАЮТ КЛАССЫ ОБЁРТКИ!
вот они все Double, Float, Long, Integer, Short, Byte, Character, Boolean
 каждый их этих классов соответствует какому-то примитиву , например Double соответствует примитиву double , Integer примитиву int
мы можем использовать этот класс и его методы, чтобы манипулировать целыми числами */
/* Создаём новый объект класса Integer
 * мы создаём этот объект класса как любой другой , все эти классы - обычные классы , просто они по умолчанию встроены в Java
 * находятся классы-обёртки в пакете java.lang  */
/* Теперь у объекта х2 есть методы , соответствующие целому числу, например мы можем целое число перевести в байтовое значение
 или мы можем сравнить целое число с другим целым числом  и множество других методов  */
/* Также у класса Integer есть статические методы
 * pasreInt("123") в аргументы этого метода мы поставляем строковое значение  и этот метод из строкового значения извлечёт целое число  */
/* Таким образом, все эти классы-обёртки  - это классы, которые содержат какие-то полезные методы , связанные с примитивами
 * КСТАТИ ПРИ СОЗДАНИИ КЛАССА Integer В КОНСТРУКТОР В КАЧЕСТВЕ АРГУМЕНТА МЫ ПОСТАВЛЯЕМ ПРИМИТИВ
 * ЕСТЬ ПРАВИЛО - ЕСЛИ ВАМ ПРОСТО НУЖНО ЧИСЛО , МЫ ИСПОЛЬЗУЕМ ПРИМИТИВЫ, ТАК КАК ОНИ ЗАНИМАЮТ МЕНЬШЕ МЕСТА, И ИХ ИНИЦИАЛИЗАЦИЯ ЧИЩЕ
 * НО ЕСЛИ ВАМ НУЖЕН КАКОЙ-ТО МЕТОД , СВЯЗАННЫЙ С ПРИМИТИВОМ , МЫ ИСПОЛЬЗУЕМ КЛАССЫ-ОБЁРТКИ */
/* АВТОУПАКОВКА И АВТОРАСПАКОВКА
У НАС ТАКОЙ СЛУЧАЙ , ДЛЯ ЦЕЛОГО ЧИСЛА ЕСТЬ 2 ВИДА , И КАК ЖЕ ИХ СВЯЗАТЬ?
         int x = 1;
         Integer x2= new Integer(123);

         ОТВЕТ: JAVA ЭТО ДЕЛАЕТ САМА
         АВТОУПАКОВКА - ЕСЛИ МЫ ИМЕЕМ СЛЕВА ССЫЛКУ (x2) ТИПА Integer , то справа мы можем поставить примитив типа int, таким образом Java
           самостоятельно упакует этот примитив в соответствующую обёртку
           ПРИМЕР
           Integer x2 = 123;

           АВТОРАСПАКОВКА - ТАКЖЕ РАБОТАЕТ, ЭТОТ ОБЪЕКТ МЫ СМОЖЕМ ПРИСВОИТЬ К ПРИМИТИВУ ТИПА int
             Integer x2 = 123;           // здесь мы примитив упаковали в класс-обёртку
             int y = x2;                 // здесь же этот примитив мы  распаковали , теперь он является обычным примитивом

             */
