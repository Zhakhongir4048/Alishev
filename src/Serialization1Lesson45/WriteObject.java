package Serialization1Lesson45;


import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;


public class WriteObject  { // В этом классе мы будем записывать объекты в файл
    public static void main(String[] args) {
        Person person1 = new Person(1, "Bob");
        Person person2 = new Person(2, "Mike");


        // Расширение файла может быть любым, мы можем оставить и вовсе без расширения
        try {
            FileOutputStream fos = new FileOutputStream("people.bin");
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            oos.writeObject(person1);
            oos.writeObject(person2);

            oos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
/*У нас в программе существуют 2 объекта, предположим, что мы эти два объекта хотим записать , чтобы использовать например их через полгода, программа у нас закончит своё
исполнение, и эти объекты во время исполнения программы находятся в оперативной памяти, к ним у нас доступ прекратится, они сотрутся
Чтобы иметь доступ к этим объектам нам нужно записать их на жёсткий диск, на постоянную память , для этого и создана сериализация

Чтобы сериализовать эти объекты нам нужно для начала создать объект FileOutputStream
Нужно создать ещё один объект ObjectOutputStream

Объект класса FileOutputStream - этот класс, и его объекты предназначены для записи последовательности байтов в файл
Неважно объект это или картинка, или звук , или что угодно , этот класс беспокоит то, что он записывает последовательность байтов в файл
А класс ObjectOutputStream предназначен исключительно для записи объектов в файл , он более конкретный и более  узко специализированный, но чтобы ему записывать объекты ему
нужен более абстрактный , более приближенный к байтам, объект FileOutputStream
В конечном итоге звуки, картинки , объекты , фильмы - всё это последовательность байтов, поэтому объект класса ObjectOutputStream берёт эти объекты , преобразовывает их
в последовательность байтов , а потом с помощью этого объекта FileOutputStream , которое мы ему передали при создании , он эту последовательность байтов, которое является
объектами записывает в файл , и в файле у нас в конечном итоге будет храниться какая-то последовательность единиц и нулей (байтов)
И эту последовательность из этого бинарного файла мы сможем считать и преобразовать в объекты

Всегда, когда мы используем  входной поток данных, мы должны его закрывать в конце нашей программы, после того, как мы заканчиваем использование этого входного потока данных

Если мы запустим программы, мы получим ошибку, чтобы дать понять Java , что мы разрешаем это делать, что мы хотим сериализовывать объекты класса Person мы должны реализовать
интерфейс Serializable, в этом интерфейсе нет методов, то есть реализовав его в нашем классе , мы не обязуемся реализовывать какие-то методы, потому, что в этом интерфейсе
ничего нет, это просто такой флаг о том , что , да мы разрешаем , и  Java может сериализовывать объекты класса Person
 */