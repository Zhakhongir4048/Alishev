package StaticLesson21;

public class StaticLesson21 {
    public static void main(String[] args) {
        Watch watch = new Watch("Rolex",40);

        Watch watch1 = new Watch("Chrono",30);

        Watch.description = "Nice";

        watch.getAllFields();
        watch1.getAllFields();

        Watch.description = "Bad";

        watch.getAllFields();
        watch1.getAllFields();

        Watch.getDescription();          // Чтобы вызвать статический метод пишем имя класса.имя метода


        watch1.printNumberOfWatch();
    }
    //  System.out.println(Math.pow(2,4));  //этот метод возводит число которое передаётся первым в параметрах в степень которая передаётся вторым в параметрах
}
class Watch{
    private String name;                // Эти переменные могут быть только у объектов класса Watch
    private int age;
    public static String description;      // Задекларировали статическую переменную типа String
    private static int countWatch;    // статическая переменная которая считает общее количество часов,по умолчанию 0



   /* public Watch(){
       this("Имя по умолчанию",0);
    }

    public Watch(String name){                   // Переопределяем конструктор
        System.out.println("Привет из второго конструктора");
        this.name = name;
    }                                                  */

    public Watch(String name, int age){           // Конструктор который назначает сразу имя и возраст

        this.name =  name;
        this.age = age;
        countWatch++;                             // мы инкрементируем с каждым созданным объектом(часами)
    }

    public void setName(String name)                   // Методы объекта
    {
        this.name = name;
    }

    public void setAge(int age)                      // Методы объекта
    {
        this.age = age;
    }

    public String getName(){
        return name;
    }

    public int getAge(){
        return age;
    }

    public static void getDescription(){         // Методы класса
        System.out.println(description);
    }

    public void getAllFields(){
        System.out.println(name + "," + age + "," + description);
    }    // метод, который будет выводить все переменные на экран

    public static void printAllFields(){
        System.out.println();
    }

    public void printNumberOfWatch(){
        System.out.println("Number of Watch is " + countWatch);
    }
}
/* Давайте будем не просто называть переменные переменными, а будем называть переменными объекта
* Почему эти переменные, String name и int age являются переменными объекта , а всё потому, что
* у каждого объекта эти переменные разные
* String name  и int age они не принадлежат классу Watch, эти переменные инициализируются лишь тогда, когда мы создаём объекты Watch
* , то есть объекты класса, когда мы создаём человека мы ему придаём имя и возраст
* Методы setName и setAge это тоже методы объекта , почему так , потому, что имя и возраст мы можем назначить конкретному объекту
* мы не можем назначить имя и возраст классу
*
* public Watch()
    {
        this("Имя по умолчанию",0);

    }
    public Watch(String name, int age)
    {
        this.name = name;
        this.age = age;
    }
* */
/* Мы не можем взять класс и поменять там имя и возраст , то есть про класс Watch
Потому, что у класса нет понятия имя  и возраст , это есть у объекта , то же самое с методами
Вы сами понимаете что вызывать метод setName не на объекте тоже бесмысленно , чтобы назначить имя
нужно сначала создать человека
 */
/* НА ЭТОМ УРОКЕ МЫ ПОГОВОРИМ ПРО ПЕРЕМЕННЫЕ И МЕТОДЫ КЛАССА !
1) эти переменные и методы класса обозначаются ключевым словом STATIC
2) обратите внимание на то, что слово static  стоит перед типом нашей переменной
ключевое слово static находится перед типом нашей переменной
3) теперь обратите внимание как мы можем инициализировать эту переменную


 public static String description;


 нам теперь не обязательно создавать объект класса Watch , теперь мы можем обратиться к этой переменной
 просто по имени класса
  Теперь мы можем обратиться к этой переменной класса , потому, что она статическая , это переменная которая принадлежит не
  к объектам класса, а к самому классу

 Watch.description;

 Эта переменная будет делиться между всему объектами класса Watch
 */
/* Давайте создадим статический метод
public static void getDescription()
{
System.out.println(description);
}
 */
/* мы можем обратиться к статическим переменным из объекта и это не будет ошибкой
Но с точкой зрения ооп -это не имеет смысла , хоть даже что мы итак можем сделать и обратиться
w1.description = "Carl";

Все объекты делят между собой эту статическую переменную description , если мы хотим эту переменную , то большой смысл будет
если мы изменим эту переменную через класс Watch.description = "Volod9";
Теперь все люди у нас это Volod9
 */
/* На самом деле когда мы создаём объекты
то поля класса Watch , они создаются заново для каждого объекта
String name;
int age;

Для каждого объекта создаются свои переменные
Статическая переменная создаётся лишь один раз и это переменная делится между всеми объектами этого класса
 */
/*  w1.description = "CarL";                  // так лучше не делай!

 */
/*  Watch.getDescription();                  // вызов статического метода класса Watch

 */
/* мы можем использовать обычную статическую переменную в обычном методе объекта
мы не можем делать обратное

public static void printAllFields()
    {
        System.out.println(name);
    }

    ВОТ ТАК МЫ НЕ МОЖЕМ ДЕЛАТЬ!
    нестатическая переменная name к ней не может совершаться обращение через статический метод (контекст)
    МЫ НЕ МОЖЕМ ОБРАЩАТЬСЯ К ПЕРЕМЕННОЙ ОБЪЕКТА NAME ИЗ СТАТИЧЕСКОГО МЕТОДА
    ПОТОМУ, ЧТО NAME У КАЖДОГО ОБЪЕКТА СВОЙ , А СТАТИЧЕСКИЙ МЕТОД ОДИН  ДЛЯ  КАЖДОГО  ОБЪЕКТА
 */
/* когда мы запускаем программу статические методы существуют
даже если мы не создадим ни одного объекта , статические методы и статические переменные они
будут уже существовать
статической переменной изначально будет назначено значение ноль
если эта строка то будет пустая строка
все эти статические переменные существуют тогда когда мы запускаем программу

 */
/* статической метод может работать только с статическими переменными

 public static void printAllFields()
    {
        System.out.println(description);
    }


 */
/* статический метод не может работать с переменными объекта , потому, что переменные объекта существуют
 у какого-то объекта
 а статический метод , он один на класс и общий на все объекты
 */
/* Статический метод нужен для того , если вашему методу не нужно знать переменные объекта
то есть если ваш метод - это в общем случае функция

мы используем статические методы в том случае,  если нам не нужно создавать объект класса
для того , чтобы воспользоваться этим методом статическим

 Хороший пример -  это методы класса Маафф Math
у нас в Java есть встроенный класс , который называется Math и он содержит кучу статических методов , в котором  мы можем получить
доступ через имя класса Math.cell(); - например
Math - ЭТО ТАКОЙ ВСТРОЕННЫЙ КЛАСС , КОТОРЫЙ АКУЛИРУЕТ В СЕБЕ ВСЕ МЕТОДЫ , КОТОРЫЕ СВЯЗАНЫ С МАТЕМАТИКОЙ
коллекция методов статических , класс Math нет переменных объекта , у класса Math  есть только переменные статические, переменные класса
одна из таких переменных это например PI (пай)
System.out.println(Math.PI); - это статическая переменная
то есть не создавая объект класса

Если мы представим вместо класса Watch это класс Math то, PI выглядит вот так public static final double PI = 3.1443;
 */
/* теперь мы можем вызвать метод
  public void printNumberOfWatch()
    {
        System.out.println("Number of watch is : " + countPeople);
    }

 у каждого объекта Watch
 */
// private static int countPeople = 0;  - общая переменная на все объекты класса