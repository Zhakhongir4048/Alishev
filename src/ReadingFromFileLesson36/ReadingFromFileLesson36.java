package ReadingFromFileLesson36;

import java.io.File;

import java.util.Scanner;

public class ReadingFromFileLesson36 {
    public static void main(String[] args) throws Exception {
        String separator = File.separator;
        String path = separator + "C:" + separator + "Users" + separator + "79998" + separator + "Desktop" + separator + "Dzhoha.txt";
        File file = new File(path);
        Scanner scanner = new Scanner(file);

        String line = scanner.nextLine(); // в этой переменной одна строка нашего файла

        String[] numbersString= line.split(" "); // мы указываем в его аргументы то, на чём будем сплитить, в данном случае это пробел, этот метод
                                                  // разделит эту строку на этих двух пробелах и получим 1 2 3 , пробелы все уберутся
        int[] numbers  = new int[3];                 // создаём массив чисел для трёх чисел
        int counter = 0;                             // Указывает на индекс
        for (String number : numbersString) {
            numbers[counter++] = Integer.parseInt(number); // В массиве numbers у нас будут храниться
        }

        for (Integer integer: numbers) {
            System.out.print(integer + "\n");
        }


        scanner.close();    // метод освобождает ресурс и поток закрывает , чтобы не оставался открытым !

    }
}
/* System.in - это константа, которая находится в классе System, этот класс System находится в пакете java.lang , это стандартный класс в Java , в этой константе находится поток
Стандартный поток ввода , открывается поток для считывания данных с консоли, мы в консоле вводим данные и эти данные находятся в переменной String
Поток - это такая сущность , у которой есть вход и есть выход, на вход мы подаём что-то и это что-то оказывается на выходе, и на выходе , то что мы подали потоку  считывается
Scanner и помещается в переменную console
 */
/* Считывать содержимое из файла можно разными способами, считывать с помощью Scanner это самое простое
Для того , что  считать данные из файла , нам нужно впервую очередь создать объект класса File, нам нужно наш файл, который находится на компьютере , переместить  в наш код
Для этого в Java существует стандартный класс File, который находится в пакете java.io, в этом пакете находится большинство классов , которые работают для ввода и вывода данных
Создадим объект класса File , этот объект будет являться сущностью файла, он будет соответствовать этому файлу , который мы собираемся считать , это такая абстракция  для работы
с файлом и в аргументы конструктора , при создании объекта мы должны указать путь до нашего файла

 File file = new File("C:\\Users\\79998\\Desktop\\Dzhoha.txt");

 Путь файла обратный бэкслэш в виндовсе, а в MacOS и Linux наоборот

 Чтобы сделать ваш код более универсальным, чтобы он работал на разных системах , мы вместо того, чтобы указывать разделитель самим , мы делегируем это задание Java
 Java будет определять на какой системе это работает и в зависимости от этого она будет сама указывать разделитель , для этого мы сделаем вот что

Мы создадим переменную String  по имени separator например и присвоим ей значение File.separator (получается мы поместим туда тот сепарэйтор который в системе)
Для этого, мы, в классе File, обратимся к статической константе сепарэйтор , который для каждой операционной системы своя


     ПРИМЕР

        String separator = File.separator;
        String path =  separator + "Users" + separator + "Desktop" + separator  + "Dzhoha" + separator + "txt";
        File file = new File(path);

 */
/* Теперь вместо того, чтобы подавать на вход объекту класса Scanner стандартный поток ввода , мы подадим наш файл
Объекту класса Scanner не важно с чем работать (с входным потоком или с файлом, главное чтобы был какой-то входной поток данных)
Появляется ошибка , которая говорит , что мы должны обрабатывать случай, если файл не будет найден, если файл не будет найден , то будет выброшено исключение
 */
/* Когда мы создали Scanner на основе этого файла, мы можем считать все строки в этом файле , для этого создадим цикл, этот цикл будет выполняться до тех пор пока есть строки
в файле
метод scanner.hasNext() возвращает true если есть строки в файле, если нет , то возвращает false
метод scanner.nextLine() с помощью этого метода будем выводить строки на экран


В КОНЦЕ ПРОГРАММЫ ВЫ ДОЛЖНЫ ЗАКРЫВАТЬ СКАННЕР


public class ReadingFromFileLesson36 {
    public static void main(String[] args) throws Exception {
        String separator = File.separator;
        String path = separator + "C:" + separator + "Users" + separator + "79998" + separator + "Desktop" + separator + "Dzhoha.txt";
        File file = new File(path);
        Scanner scanner = new Scanner(file);


        while (scanner.hasNext()) {
            System.out.println(scanner.nextLine());

        }


        scanner.close();

    }
}
 */
/* Допустим, нам надо с файла считать три числа и поместить их в переменную типа int
Сначала считаем строку, мы знаем что в нашем файле одна строка


String line = scanner.nextLine(); // в этой переменной одна строка нашего файла

Теперь нам нужно получить каждое число в отдельности , для этого мы создаём массив типа String и присваиваем line.split(" ");

 String line = scanner.nextLine(); // в этой переменной одна строка нашего файла

        String[] numbers = line.split(" ");
 */
/* Если стоит точка, то нам нужно использовать регулярное выражение
String[] numbers = line.split("\\.");

Метод split в аргументы принимает то, на что он будет разделять строку, разделяя строку , возвращает массив
 */
/* Чтобы числа представлялись  переменной типа int , мы должны каждый из этих трёх чисел преобразовать в переменную типа int
Для этого, мы должны вызвать на каждом из этих числе метод ParseInt() , который находится в классе Integer

        int[] numbers  = new int[3];                 // создаём массив чисел для трёх чисел
        int counter = 0;                             // Указывает на индекс
        for (String number : numbersString) {
        numbers[counter++] = Integer.parseInt(number); // В массиве numbers у нас будут храниться

 */
/* Если ваш файл лежит в корне вашего проекта , то есть в папке проекта  , то вам не нужно задавать полный путь до него, давайте создадим файл в папке нашего проекта
и назову его test2 и поместим в него текст Hello World
И мы можем найти этот файл сделав вот так
File file = new File(test2);
 */