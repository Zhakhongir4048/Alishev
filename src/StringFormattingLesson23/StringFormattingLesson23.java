package StringFormattingLesson23;

public class StringFormattingLesson23 {
    public static void main(String[] args) {
        System.out.printf("This is a string, %s ", "NICE");

        System.out.printf("\nThis is a string, %d", 10);

        System.out.printf("\n%f This is %s a string, %d", 10.4, "HIHI", 10000);

        System.out.printf("\nString %10d", 532);
        System.out.printf("\nString %10d", 5);
        System.out.printf("\nString %10d", 100000);
        System.out.printf("\nString %10d", 1000000000);
        // %[10] - ширина числа
        // %[-10] - ширина числа, начиная слева
        // %[.2] - числа после запятой в вещественном числе

        System.out.printf("\nString %.2f", 45.3);
        System.out.printf("\nString %.2f", 45.32265);
        System.out.printf("\nString %.2f", 45.32765);  // числа не только форматируются, но и округляются
    }
}
/* System.out.print(); не переносит строку
System.out.println(); переносит строку

помимо них у нас есть метод printf(); он нужен для форматирования строк

System.out.printf(); - нужен для форматирования строк

System.out.printf("This is a string, %s "); В этот метод мы на первое место вставим строку, а следующий параметр мы поставляем то, что будем вставлено в эту строку %s

    %s - это то место, куда должна попасть переменная типа String, поэтому мы пишем объект типа String

     System.out.printf("This is a string, %s ", "NICE");

     % - это специальное обозначение того, что сейчас будет тип вставляемого значения

      Помимо того, что мы можем вставлять строки, мы можем вставлять
      1) %d(диджет) - цифры
      2) %f(floating-point number)- вещественное число

Мы можем сколько угодно иметь таких вещей

   System.out.printf("%f This is %s a string, %d", 10.4, "HIHI", 10000);

   Количество параметров должно соответствовать количеству этих обозначений с процентом

   Помимо того, что мы можем просто вставлять эти значения, мы можем их форматировать
   Часто бывает , что в независимости от размера числа, от того, сколько это число занимает символов, нам нужно чтобы оно было какой-нибудь ширины
   для этого мы перед обозначением %d мы вставляем то число, которая будет обозначать ширину нашего конечного числа
       Пример: перед d поставим 10, и если мы поставим любое число, то оно будет шириной в 10 символов, независимо от того, какое это число

       System.out.printf("String %10d",532);

Вывод
String        532
 */
/* \n - производит перенос строки */

/* если мы поставим минус в ширине , то числа теперь идут слева, а не справа

        System.out.printf("\nString %-10d", 532);
        System.out.printf("\nString %-10d", 5);
        System.out.printf("\nString %-10d", 100000);
        System.out.printf("\nString %-10d", 1000000000);


Вывод
String 532
String 5
String 100000
String 1000000000
 */
/* Также удобно форматировать вещественные числа, мы хотим чтобы у нас было 2 числа после запятой

  System.out.printf("\nString %.2f", 45.3);

  Вывод
  String 45,30
 */
/* Вы используете printf() если вам нужно отформатировать ваши числа и в этом методе вы можете использовать просто число какое-то */